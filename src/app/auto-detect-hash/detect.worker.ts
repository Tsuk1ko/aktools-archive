/// <reference lib="webworker" />
// tslint:disable: all
let ItemHashList : any[] = [
    {
        "id": "2001",
        "hash": "011111000000111000111000111100000100100001010000010101111010010010111000010100001111100001100001101110010100100111110010111001101000111110001000"
    },
    {
        "id": "2003",
        "hash": "011011000000111001001000111000010000100001011000010101111100010010111110110100101111100001100001111110111000111111011010111011011000011011000000"
    },
    {
        "id": "2004",
        "hash": "011111000000110010101000111010010100100001010010010101111100010010111110010101011011011011001101111101011000111111100100111010011000011110100000"
    },
    {
        "id": "3003",
        "hash": "011111000000111010101000110011000100100011100010101000101010001101000010001001001010110100001110111110100100111101010100111011011100011111000000"
    },
    {
        "id": "3112",
        "hash": "011111000000111000111000110000001110110001011010010101001111010001000011011111000101000011111010101110111010100111111010111010111010011110000000"
    },
    {
        "id": "3113",
        "hash": "011111000000111000001000100000101110101000110110101011011100010000011001011000001101011110001010101111110000100110111100111001110100011111000000"
    },
    {
        "id": "3222",
        "hash": "011001000000111100101000111000000001101000100001100000100001110000000001010100001001000110000000110100010010011101010100101011110100011011001000"
    },
    {
        "id": "3241",
        "hash": "011111000011111000011001101101000010101000101010011001011001010001001001010000000101100110010010101111010010100111110000111001110100011111000000"
    },
    {
        "id": "3261",
        "hash": "011111000011111000001001101100010010101010101010011001101001010001101001010001010101100110010011101111010000100111110100111001110100011011001000"
    },
    {
        "id": "3262",
        "hash": "011011000001111100101000110000010010101001010001110000101000010011001001010100000001000110000000110100010010111101010100111011110100011111001000"
    },
    {
        "id": "3301",
        "hash": "011011101000111000011101110101001011101101100011001010110111000011011011001100110111011010010100010100111100001100111000110010111010011111010000"
    },
    {
        "id": "3303",
        "hash": "111101000000111101001101111001010110101010011110110001111000101110111101100111101011100110111001110111010000010011011000111011010100111011010000"
    },
    {
        "id": "3401",
        "hash": "011111000000111010001000111010010010100101001100010001000101001000100111011010111001101101001101110001001100111000110010111011011010011011000000"
    },
    {
        "id": "4001",
        "hash": "011011001000111001101000101101000000100011000010001000010101101101110101011010010111110100000110001110001110000111100100001110011010110011000100"
    },
    {
        "id": "4002",
        "hash": "001100010000110100111100111100100110101000001101101000101110011000010110011000110110000110101110010111011001001111100010101011001000101101011000"
    },
    {
        "id": "4003",
        "hash": "011110110110001010110100101100010000100010001100101110110110000110010011110111111101001111110011011010110101001110001010010010101010011110100000"
    },
    {
        "id": "4004",
        "hash": "011110000000111001110010111100110110100001111010110110001100010100110100001011001100011011001101011010010010010010010100011010101000111011010000"
    },
    {
        "id": "4005",
        "hash": "011100010000111011110011101011110000101111110010010011010010010111010010010100011010010011110010010011010110010011011100010011010100011011110000"
    },
    {
        "id": "4006",
        "hash": "001111000000011000111000110110101010100110110110100111000110100010011001010110001101010010001101111101001001110101110100111010110110111101100000"
    },
    {
        "id": "7001",
        "hash": "001111110000011101101000110011111101111010011011100111011000100101101001110001110011100010010011101011011100100010011010110110110100111111100000"
    },
    {
        "id": "7002",
        "hash": "001111000000011011101100110101010110111101010100101011110010101011101101100010101101110100110001011010100000111011010100111100010100111011010100"
    },
    {
        "id": "30011",
        "hash": "011111000000111000111000100100101110100100010010011001010111001001001001010011000101011000101011101110110000100111110010111001101010111011000000"
    },
    {
        "id": "30012",
        "hash": "011111000000111010101000111110001000100000110010010100100011011000000111010010100011010111000111101000010100110100110010111001101010011111000000"
    },
    {
        "id": "30013",
        "hash": "001111000000011010101000111011000110101010100110011101000111010011001100001010111010100011000110100011010010111110010100111001110100001111000000"
    },
    {
        "id": "30021",
        "hash": "011111000000111000011000110100101110110101001010100010100011011000000011010111110101000111101001101110110010101111111100111001110100011111000000"
    },
    {
        "id": "30022",
        "hash": "011111000000111000111000110001111100100010111010100110110111010000010101010001110111011111001011101110110100100111110100111011110100011010000000"
    },
    {
        "id": "30024",
        "hash": "110000010000100001001010100000110001001101011001000101100001000000111011000001001001111001000011110110011001111000010000111000110100011111101000"
    },
    {
        "id": "30031",
        "hash": "011111000000111001001000100110110110100010110010010011001111000110001101010110001101001101001111101000111000101001011010111010111000011111000000"
    },
    {
        "id": "30032",
        "hash": "000111000000001001101000010000000010101100110010011000100011011100100011010110010101011110000111101100010100111000110100101011100100100010000000"
    },
    {
        "id": "30033",
        "hash": "001111000000011000001100101100000010101010100011010100000010010010000011001011000011001000001111111000110100101111111100011100110010001110000000"
    },
    {
        "id": "30034",
        "hash": "001011000000000101101000010000110000110000100010111000100100110100010000001010001000011011100000111001101000011111010100011011010100001011000000"
    },
    {
        "id": "30041",
        "hash": "011111000000111000011000110100101110100110101010010111000111000101110101010101100101000110001111101110011000101100110110111011110100011111000000"
    },
    {
        "id": "30042",
        "hash": "011111000000110100111000110100101110101001110010011001001011001001000001011100101101011101110001101101111100111101110000111000010100011111000000"
    },
    {
        "id": "30043",
        "hash": "011111001000111000011010111100110110101111000010011110111011001110111101010110111011011010111101101101110100101101110100111000010100011011000000"
    },
    {
        "id": "30044",
        "hash": "011011000100101101110000101110101000110100110101110000101001010100100111010100100101111100001001111000110000110110010000111001010100011110101100"
    },
    {
        "id": "30051",
        "hash": "011111000000111000111100100100110010100101001010010001100111000011101101010111011101000110001111101110111000111101110100111001110100011111000000"
    },
    {
        "id": "30053",
        "hash": "011111000000111011101000110011101010100010110110010100101001001110010101011001010101011011000011101010010100110110100110111000110100011111000000"
    },
    {
        "id": "30061",
        "hash": "011111000111111011101011101111100001101110100110011001010010011101101010011100010011010110110110110011110010111110100101101011010101111010001101"
    },
    {
        "id": "30062",
        "hash": "011110100111111000001001111000000001100000000010010010101100010001111000010001110000101000100010101111010010110100110101111011010101011111000001"
    },
    {
        "id": "30063",
        "hash": "111110101111111000101011100100100101101111010110011000101000011110010110011011010100110110010010110100010110110110010101111001010101011110000001"
    },
    {
        "id": "30073",
        "hash": "011111000001111010011000100100101010101100010110011011011101001100101011011100011001000111011010101110111010100111110100111010110100011011000000"
    },
    {
        "id": "30074",
        "hash": "011111000000111001001000110001001000101010101001010110000100000111110001111000011101111010111001101100110000111110010100111011010100011111001000"
    },
    {
        "id": "30083",
        "hash": "011111000000111010011000110010110010100101100110010110001011000111010011011110100101001101010111100101010010111101100100111011010100011111000000"
    },
    {
        "id": "30084",
        "hash": "011111100000111010110110101100100100110011101110101011011110001110111101010111001100111001101000110111011000111010011100111011000100011011000000"
    },
    {
        "id": "30093",
        "hash": "011111000011111010101001100100100010101000011010011000001110010000010101001001001101001001001101100001111100111101010000111001110100011111000000"
    },
    {
        "id": "30103",
        "hash": "011011000000111001001000101010111010101001001100001101111101011011101001000110001001011000001000100110011100110111110000111000110100011111000000"
    },
    {
        "id": "30104",
        "hash": "011111101100111001011100111010001100101101001101101000101001000111010101101100010011011000011001101001001010011110110000101010110100011010001000"
    },
    {
        "id": "30115",
        "hash": "011111000001111001011000110110001000101101100110011000011010110010001100100111100111100100101101101100110110111011010110111011010100101011101000"
    },
    {
        "id": "30125",
        "hash": "011111001000111001001010110111010010110001111000100110011111100100110011110001110101110100000110100110111010111101110100111001000100011111001000"
    },
    {
        "id": "30135",
        "hash": "011101010100111011011000111001111000110101100110001101000110001101101010001010010101110100101010100110111010010110010100111001010100011110100000"
    },
    {
        "id": "31013",
        "hash": "011111000000111010001000100110011100101011010100011000101101001100101101000111100111100001000101100111010010110101010100111011010100011110000000"
    },
    {
        "id": "31014",
        "hash": "011110000000110100110010110111001010110010001100111001001101000000011101001001001111110011001111100001011110110011010100111100110100011110100000"
    },
    {
        "id": "31023",
        "hash": "011111000000111011001000111010011010101001011010101110011011001010110011001001011011010011101101101110110000111110101010111010110100011111000000"
    },
    {
        "id": "31024",
        "hash": "111110101000110001011000110101011100111000011000100100101100101001100111101100101101110001101010100100011100011110110100101111010100111010101000"
    },
    {
        "id": "32001",
        "hash": "011111000000111001001000111110101000101100000110111101010100110010101101111010101011110111011001100110110000110010110000111101110100011111000000"
    }
];
let BoundDatas = [
    { R: [225, 255], G: [175, 205], B: [0, 10] },
    { R: [208, 222], G: [185, 205], B: [208, 222] },
    { R: [208, 222], G: [185, 205], B: [208, 222] },
    { R: [0, 5], G: [170, 190], B: [240, 255] },
    { R: [215, 245], G: [225, 240], B: [50, 60] },
    { R: [0, 10], G: [0, 4], B: [0, 4] },
    { R: [200, 220], G: [165, 179], B: [0, 4] }
];
let XPoint: Uint16Array; //Y轴方向上的匹配点计数
let YPoint: Uint16Array; //X轴方向上的匹配点计数
let XBound = [[]];
let YBound = [[]];
let HashList = [];
function fillPixelData(ImageData) {
    for (let index = 0; index < ImageData.data.length; index += 4) {
        const r = ImageData.data[index], g = ImageData.data[index + 1], b = ImageData.data[index + 2];
        const x = Math.floor(index / 4) % ImageData.width, y = Math.floor(Math.floor(index / 4) / ImageData.width)
        if (BoundDatas.some((val) => {
            return val.R[0] <= r && val.R[1] >= r && val.G[0] <= g && val.G[1] >= g && val.B[0] <= b && val.B[1] >= b;
        })) {
            XPoint[x]++;
            YPoint[y]++;
        }
    }
}
function analyzeBound() {
    for (let x = 0, WhiteSpace = 0, LastBlank = 0; x < XPoint.length; x++) {
        if (XPoint[x] > 2) {
            if (XBound[XBound.length - 1].length == 0) {
                XBound[XBound.length - 1][0] = x;
                WhiteSpace = 0;
            }
            LastBlank = x;
            WhiteSpace = 0;
        } else if (XBound[XBound.length - 1].length == 1 && WhiteSpace >= 10) {
            XBound[XBound.length - 1][1] = LastBlank;
            XBound.push([])
            WhiteSpace = 0;
        } else if (XBound[XBound.length - 1].length == 1) {
            WhiteSpace++;
        }
    }
    if (XBound[XBound.length - 1].length == 1) {
        if (Math.abs(((XPoint.length - 1) - XBound[XBound.length - 1][0]) - (XBound[XBound.length - 2][1] - XBound[XBound.length - 2][0])) < 5) {
            XBound[XBound.length - 1][1] = XPoint.length - 1
        } else {
            XBound.pop();
        }
    } else {
        XBound.pop();
    }
    for (let x = 0; x < XBound.length; x++) {
        if (XBound[x][1] - XBound[x][0] < 50) {
            XBound.splice(x, 1)
            x--;
        }
    }
    for (let y = 0, WhiteSpace = 0, LastBlank = 0; y < YPoint.length; y++) {
        if (YPoint[y] > 5) {
            if (YBound[YBound.length - 1].length == 0) {
                YBound[YBound.length - 1][0] = y;
                WhiteSpace = 0;
            }
            LastBlank = y;
        } else if (YBound[YBound.length - 1].length == 1 && WhiteSpace >= 10) {
            YBound[YBound.length - 1][1] = LastBlank;
            YBound.push([])
            WhiteSpace = 0;
        } else if (YBound[YBound.length - 1].length == 1) {
            WhiteSpace++;
        }
    }
    if (YBound[YBound.length - 1].length == 1) {
        YBound[YBound.length - 1][1] = YPoint.length - 1
    } else {
        YBound.pop();
    }
    for (let y = 0; y < YBound.length; y++) {
        if (YBound[y][0] == YBound[y][1]) {
            YBound.splice(y, 1)
            y--;
        }
    }
}
addEventListener('message', (message) => {
    switch (message.data.method) {
        case "ImageDataLoad":
            postMessage({ text: "图像数据预处理 - 边界识别", progress: 0.1 });
            XPoint = new Uint16Array(message.data.data.width);
            YPoint = new Uint16Array(message.data.data.height);
            XBound = [[]];
            YBound = [[]];
            HashList=[];
            let ImageData = fillPixelData(message.data.data);
            postMessage({ method: "status", text: "分析图像边界", progress: 0.2 });
            analyzeBound();
            postMessage({ method: "status", text: "主线程切图(页面可能暂时卡死)", progress: 0.35 });
            postMessage({ method: "clipImage", XBound: XBound, YBound: YBound });
            break;
        case "calcDhash":
            HashList = message.data.ImageDatas.map((item: ImageData) => {
                let HashString = "";
                for (let index = 0; index < item.data.length; index += 4) {
                    if (Math.floor(index / 4) % item.width == 0) continue;
                    if (Math.floor((item.data[index - 4] + item.data[index - 3] + item.data[index - 2]) / 3) > Math.floor((item.data[index] + item.data[index + 1] + item.data[index + 2]) / 3)) {
                        HashString += 1
                    } else {
                        HashString += 0
                    }
                }
                return HashString
            });
            postMessage({ method: "status", text: "正在判断图像对应的物品", progress: 0.45 });
            HashList=HashList.map((hash: String) => {
                return ItemHashList.map((hashs) => {
                    let Confidence=0;
                    for(let i=0;i<hash.length;i++){
                        if(hash[i]==hashs.hash[i]) Confidence++;
                    }
                    Confidence/=144
                    hashs.confidence=Confidence;
                    return hashs;
                }).sort((a,b) =>{
                    return b.confidence-a.confidence
                })
            })
            postMessage({ method: "status", text: "主线程切割数字(页面可能暂时卡死)", progress: 0.57 });
            postMessage({ method: "getNumberData" });
            break;
        case "getItemCount":
            postMessage({ method: "status", text: "正在识别物品数量", progress: 0.6 });
    }
});
